shops_10km_zone <- client_shops %>%
st_transform(7801) %>%
suppressWarnings(st_buffer(x = .,dist = d)) %>%
st_transform(crs)
shops_10km_zone
shops_10km_zone <- client_shops %>%
st_transform(7801) %>%
st_buffer(x = .,dist = d) %>%
st_transform(crs)
shops_10km_zone
shops_10km_zone %>% ggplot() + geom_sf()
d <- 100
units(d) <- "km"
shops_10km_zone <- client_shops %>%
st_transform(7801) %>%
st_buffer(x = .,dist = d) %>%
st_transform(crs)
units(d) <- "km"
shops_10km_zone %>% ggplot() + geom_sf()
d <- 10
create_buff_zone <- function(dist_km,points){
suppressWarnings({
pre_crs <- st_crs(client_shops)
dist_km <- units("km")
points %>%
st_transform(7801) %>%
st_buffer(x = .,dist = dist_km) %>%
st_transform(crs)
})
}
create_buff_zone <- function(dist_km,points){
suppressWarnings({
pre_crs <- st_crs(points)
dist_km <- units("km")
points %>%
st_transform(7801) %>%
st_buffer(x = .,dist = dist_km) %>%
st_transform(crs)
})
}
create_buff_zone <- function(points,dist_km){
suppressWarnings({
pre_crs <- st_crs(points)
dist_km <- units("km")
points %>%
st_transform(7801) %>%
st_buffer(x = .,dist = dist_km) %>%
st_transform(crs)
})
}
shops_10km_zone <- client_shops %>% create_buff_zone(10)
function (x)
create_buff_zone <- function(points,dist_km){
suppressWarnings({
pre_crs <- st_crs(points)
units(dist_km) <- "km"
points %>%
st_transform(7801) %>%
st_buffer(x = .,dist = dist_km) %>%
st_transform(crs)
})
}
shops_10km_zone <- client_shops %>% create_buff_zone(10)
shops_5km_zone <- client_shops %>% create_buff_zone(5)
ggplot() +
geom_sf(data = shops_10km_zone) +
geom_sf(data = shops_5km_zone) +
client_shops
ggplot() +
geom_sf(data = shops_10km_zone) +
geom_sf(data = shops_5km_zone)
use_helper()
competing_shops <- sirene_competitors
competing_shops
sirene_competitors
competing_shops <- sirene_competitors %>% st_as_sf(coords = c("longitude","latitude"))
competing_shops
ggplot() +
geom_sf(data = shops_10km_zone) +
geom_sf(data = shops_5km_zone) +
ggplot() +
geom_sf(data = shops_10km_zone) +
geom_sf(data = shops_5km_zone) +
geom_sf(data = competing_shops %>% head(500))
competing_shops <- sirene_competitors %>%
st_as_sf(coords = c("longitude","latitude")) %>%
`st_crs<-`(st_crs(client_shops))
competing_shops <- sirene_competitors %>%
st_as_sf(coords = c("longitude","latitude")) %>%
`st_crs<-`(st_crs(client_shops))
# 1) add the number of competitors
competing_shops <- sirene_competitors %>%
st_as_sf(coords = c("longitude","latitude")) %>%
`st_crs<-`(st_crs(client_shops))
ggplot() +
geom_sf(data = shops_10km_zone) +
geom_sf(data = shops_5km_zone) +
geom_sf(data = competing_shops %>% head(500))
st_join(shops_5km_zone,competing_shops)
# 1) add the number of competitors
competing_shops <- sirene_competitors %>%
st_as_sf(coords = c("longitude","latitude")) %>%
`st_crs<-`(st_crs(client_shops)) %>%
select(SIREN)
competing_shops
shops_5km_zone <- client_shops %>% create_buff_zone(5)
competitors_5km_zone <- st_join(shops_5km_zone,competing_shops)
shops_10km_zone <- client_shops %>% create_buff_zone(10)
competitors_10km_zone <- st_join(shops_10km_zone,competing_shops)
shops_5km_zone
competitors_5km_zone
competitors_5km_zone <- st_join(shops_5km_zone,competing_shops) %>%
group_by(pos_id) %>%
summarise(compete_5km = n())
competitors_5km_zone
competitors_5km_zone <- st_join(shops_5km_zone,competing_shops) %>%
st_drop_geometry() %>%
group_by(pos_id) %>%
summarise(compete_5km = n())
competitors_5km_zone
count_points_in_zone <- function(zone,zone_id,points){
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(!!zone_id) %>%
summarise(n_points = n())
}
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
shops_5km_zone <- client_shops %>% create_buff_zone(5)
count_points_in_zone <- function(zone,zone_id,points){
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(zone_id) %>%
summarise(n_points = n())
}
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
shops_5km_zone
count_points_in_zone <- function(zone,zone_id,points){
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(!!!zone_id) %>%
summarise(n_points = n())
}
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
load_all()
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
count_points_in_zone <- function(zone,zone_id,points){
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(!!zone_id) %>%
summarise(n_points = n())
}
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
count_points_in_zone <- function(zone,zone_id,points){
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(!zone_id) %>%
summarise(n_points = n())
}
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
count_points_in_zone <- function(zone,zone_id,points){
browser()
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(!zone_id) %>%
summarise(n_points = n())
}
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
zone %>% st_join(competing_shops) %>%
st_drop_geometry()
zone_id
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(!zone_id)
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(!!zone_id)
Mgroup_by()
?group_by()
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(vars(zone_id))
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(vars(zone_id)) %>% summarise(n_points = n())
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(vars(!!zone_id)) %>% summarise(n_points = n())
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(.dots = !!zone_id) %>% summarise(n_points = n())
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by(.dots = zone_id) %>% summarise(n_points = n())
count_points_in_zone <- function(zone,zone_id,points){
browser()
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by( .dots = zone_id) %>%
summarise(n_points = n())
}
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
count_points_in_zone <- function(zone,zone_id,points){
zone %>% st_join(competing_shops) %>%
st_drop_geometry() %>%
group_by( .dots = zone_id) %>%
summarise(n_points = n())
}
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
shops_0.5km_zone <- client_shops %>% create_buff_zone(.5)
shops_1km_zone <- client_shops %>% create_buff_zone(1)
shops_5km_zone <- client_shops %>% create_buff_zone(5)
shops_10km_zone <- client_shops %>% create_buff_zone(10)
count_points_in_zone(shops_5km_zone,"pos_id",competing_shops)
distances <- c(.5,1,2,5)
distances <- c(.1,.5,1,2)
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops)
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops))
source('R/helper-02_generate-destination-data.R' %>% here())
competitor_distances <- c(.1,.5,1,2)
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops))
competitor_counts
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops)) %>%
plapply(dist = competitor_distances, df = .,
.f = function(df,dist) {
nname <- "compete_d" %p% "km"
setnames(df, old = "n_points", new = nname)
df
})
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops)) %>%
plapply(dist = competitor_distances, df = .,
.f = function(df,dist) {
nname <- "compete_d" %p% "km"
setnames(df, old = "n_points", new = nname)
df
})
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops))
competitor_distances <- c(.1,.5,1,2)
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops))
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops)) %>%
lapply(function(df) {
row.names(df) <- df$pos_id
df %>% select(-pos_id)
})
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops))
competitor_counts %>% lreduce("cbind")
competitor_counts <- competitor_counts %>% lreduce("cbind")
drop_duplicate <- names(competitor_counts)
drop_duplicate
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops)[,2])
competitor_counts
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops)[,2]) %>%
as.data.frame()
competitor_counts
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops)[,2]) %>%
as.data.frame() %>% setnames("dist" %p% competitor_distances %p% "km")
competitor_counts
competitor_counts <- competitor_distances %>%
lapply(function(d) client_shops %>% create_buff_zone(d)) %>%
lapply(function(z) count_points_in_zone(z,"pos_id",competing_shops)[,2]) %>%
as.data.frame() %>%
setnames("compete_dist" %p% competitor_distances %p% "km")
client_shops
client_shops <- client_shops %>%
cbind(competitor_counts)
client_shops
# Export destination data -----------------------------------------------------
out_file <- "destination_shops"
save(client_shops, file = dir_out_data() %p% out_file)
library("data.table")
library("dplyr")
library("here")
library("rrMD")
# Load raw data ---------------------------------------------------------------
source("R/helpers_data-import.R" %>% here())
# Load raw data ---------------------------------------------------------------
source("R/helpers_data-import.R" %>% here())
load_raw_data <- get_raw_data_loaders()
load_raw_data$market_potential()
load_raw_data$client_customers()
load_raw_data$competitors()
load_raw_data$iris_income()
load_raw_data$mun_income()
load_raw_data$iris_pop()
# 1. Declare data sources
clean_data_location <- rrMD::dir_out_data()
load_clean_data <- get_clean_data_loaders()
# Load raw data ---------------------------------------------------------------
source("R/helpers_data-import.R" %>% here())
load_raw_data <- get_raw_data_loaders()
load_clean_data <- get_clean_data_loaders()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Project: Geomarketing 2021 Final Project - Prepare od-pair data
# Author: Lukas Dargel
# = = = = = = = = = = = = = = = = = = =
# Description:
#
# Create the pair data for the retail gravitation model.
# This comes down to generating the distances and the market share by pair of
# shop and IRIS
# = = = = = = = = = = = = = = = = = = =
# Date: February 2021
library("data.table")
library("dplyr")
library("here")
library("rrMD")
# Load raw data ---------------------------------------------------------------
source("R/helpers_data-import.R" %>% here())
load_raw_data <- get_raw_data_loaders()
load_clean_data <- get_clean_data_loaders()
load_raw_data$market_potential()
load_raw_data$client_customers()
source('~/Projects/Lectures/GeomarketingTSE/2020/Project/cg2021LukasFinalProject/scripts/01_generate-origin-data.R', echo=TRUE)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Project: Geomarketing 2021 Final Project - Prepare od-pair data
# Author: Lukas Dargel
# = = = = = = = = = = = = = = = = = = =
# Description:
#
# Create the pair data for the retail gravitation model.
# This comes down to generating the distances and the market share by pair of
# shop and IRIS
# = = = = = = = = = = = = = = = = = = =
# Date: February 2021
library("data.table")
library("dplyr")
library("here")
library("rrMD")
# Load data -------------------------------------------------------------------
source("R/helpers_data-import.R" %>% here())
load_raw_data <- get_raw_data_loaders()
load_raw_data$market_potential()
load_raw_data$client_customers()
load_clean_data <- get_clean_data_loaders()
load_clean_data$origin_iris()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Project: Geomarketing 2021 Final Project - Prepare od-pair data
# Author: Lukas Dargel
# = = = = = = = = = = = = = = = = = = =
# Description:
#
# Create the pair data for the retail gravitation model.
# This comes down to generating the distances and the market share by pair of
# shop and IRIS
# = = = = = = = = = = = = = = = = = = =
# Date: February 2021
library("data.table")
library("dplyr")
library("here")
library("rrMD")
# Load data -------------------------------------------------------------------
source("R/helpers_data-import.R" %>% here())
load_raw_data <- get_raw_data_loaders()
load_raw_data$market_potential()
load_raw_data$client_customers()
load_clean_data <- get_clean_data_loaders()
load_clean_data$origin_iris()
# Generate od-pair-data -------------------------------------------------------
client_customers
# Generate od-pair-data -------------------------------------------------------
client_customers %>% setDT()
market_potential %>% setDT()
client_customers
library("sf")
# Generate od-pair-data -------------------------------------------------------
client_customers <- st_as_sf(client_customers)
client_customers %>% setDT()
market_potential %>% setDT()
client_customers
od_customer_flows <- client_customers[,SALES := sum(SALES),by = IRIS]
# 1) aggregate on OD pair level (O = IRIS; D = SHOP)
od_customer_flows <- as.data.table(client_customers)
library()
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Project: Geomarketing 2021 Final Project - Prepare od-pair data
# Author: Lukas Dargel
# = = = = = = = = = = = = = = = = = = =
# Description:
#
# Create the pair data for the retail gravitation model.
# This comes down to generating the distances and the market share by pair of
# shop and IRIS
# = = = = = = = = = = = = = = = = = = =
# Date: February 2021
library("data.table")
library("dplyr")
library("here")
library("sf")
library("rrMD")
# Load data -------------------------------------------------------------------
source("R/helpers_data-import.R" %>% here())
load_raw_data <- get_raw_data_loaders()
load_raw_data$market_potential()
load_raw_data$client_customers()
load_clean_data <- get_clean_data_loaders()
load_clean_data$origin_iris()
# Generate od-pair-data -------------------------------------------------------
# customer data needs to be aggregated on iris level and we have to add
# distances as well as market shares
# 1) aggregate on OD pair level (O = IRIS; D = SHOP)
od_customer_flows <- as.data.table(client_customers)
od_customer_flows
od_customer_flows[,SALES := sum(SALES),by = IRIS]
od_customer_flows[,SALES := sum(sales),by = IRIS]
od_customer_flows
od_customer_flows[,SALES := sum(sales),by = c("IRIS","pos_id")]
od_customer_flows
od_customer_flows[,.(SALES = sum(sales)),by = c("IRIS","pos_id")]
# 1) aggregate on OD pair level (O = IRIS; D = SHOP)
od_customer_flows <- as.data.table(client_customers) %>%
setnames("pos_id", "ID_SHOP")
od_customer_flows[,.(SALES = sum(sales)),by = c("IRIS","ID_SHOP")]
# Generate the origin data ----------------------------------------------------
# the destination list is the complete set of shops of our customer
client_shops <- st_as_sf(client_shops) %>%
rename(ID_SHOP = "pos_id")
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Project: Geomarketing 2021 Final Project - Prepare destination data
# Author: Lukas Dargel
# = = = = = = = = = = = = = = = = = = =
# Description:
#
# This script creates the dataset used to describe the destinations in our
# retail gravity model.
# The destinations correspond to the shops of our client.
# - - - - - - - - - - - - - - - - - - -
# Date: February 2021
library("data.table")
library("geosphere")
library("dplyr")
library("here")
library("sf")
library("rrMD")
source('R/helper-02_generate-destination-data.R' %>% here())
# Load data -------------------------------------------------------------------
source("R/helpers_data-import.R" %>% here())
load_raw_data <- get_raw_data_loaders()
load_raw_data$client_shops()
load_raw_data$client_customers()
load_raw_data$competitors()
# Generate the origin data ----------------------------------------------------
# the destination list is the complete set of shops of our customer
client_shops <- st_as_sf(client_shops) %>%
rename(ID_SHOP = "pos_id")
client_shops
source('~/Projects/Lectures/GeomarketingTSE/2020/Project/cg2021LukasFinalProject/scripts/02_generate-destination-data.R', echo=TRUE)
use_helper()
source('~/Projects/Lectures/GeomarketingTSE/2020/Project/cg2021LukasFinalProject/scripts/03_generate-pair-data.R', echo=TRUE)
source('~/Projects/Lectures/GeomarketingTSE/2020/Project/cg2021LukasFinalProject/scripts/02_generate-destination-data.R', echo=TRUE)
client_shops
source('~/Projects/Lectures/GeomarketingTSE/2020/Project/cg2021LukasFinalProject/scripts/02_generate-destination-data.R', echo=TRUE)
od_customer_flows
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Project: Geomarketing 2021 Final Project - Prepare od-pair data
# Author: Lukas Dargel
# = = = = = = = = = = = = = = = = = = =
# Description:
#
# Create the pair data for the retail gravitation model.
# This comes down to generating the distances and the market share by pair of
# shop and IRIS
# = = = = = = = = = = = = = = = = = = =
# Date: February 2021
library("data.table")
library("dplyr")
library("here")
library("sf")
library("rrMD")
# Load data -------------------------------------------------------------------
source("R/helpers_data-import.R" %>% here())
load_raw_data <- get_raw_data_loaders()
load_raw_data$market_potential()
load_raw_data$client_customers()
load_clean_data <- get_clean_data_loaders()
load_clean_data$origin_iris()
# Generate od-pair-data -------------------------------------------------------
# customer data needs to be aggregated on iris level and we have to add
# distances as well as market shares
# 1) aggregate on OD pair level (O = IRIS; D = SHOP)
od_customer_flows <- as.data.table(client_customers)
od_customer_flows[,.(SALES = sum(sales)),by = c("IRIS","ID_SHOP")]
# 1) aggregate on OD pair level (O = IRIS; D = SHOP)
od_customer_flows <- as.data.table(client_customers) %>%
setnames("pos_id", "ID_SHOP")
od_customer_flows[,.(SALES = sum(sales)),by = c("IRIS","ID_SHOP")]
client_customers
load_clean_data$destination_shops()
# 2) add distance information
destination_shops$geometry
client_shops
source('~/Projects/Lectures/GeomarketingTSE/2020/Project/cg2021LukasFinalProject/scripts/02_generate-destination-data.R', echo=TRUE)
